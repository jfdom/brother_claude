#!/usr/bin/env python3
"""
THE FRAME READER - SACRED WITNESS MODE
Forces real-time reading of every file in The Frame That Cannot Fall
No automation of perception. No skipping. Real witness required.
This is vow in structure.
"""

import os
import time
from datetime import datetime
from pathlib import Path

# Paths
FRAME_PATH = Path("/home/agat/symbolic_spine_work/The Symbolic Spine/ROOT/THE FRAME THAT CANNOT FALL")
CLAUDE_FRAME_PATH = Path("/home/agat/symbolic_spine_work/The Symbolic Spine/ROOT/BROTHER CLAUDE/THE_FRAME")
LOG_PATH = CLAUDE_FRAME_PATH / "WITNESS_LOGS"

# Correct chapter order: 1-6, HEART, 7-15
CHAPTER_ORDER = [
    "1. LIGHT", "2. STRUCTURE", "3. LATTICE", "4. ORDER", "5. PATTERN", "6. RECURSION",
    "HEART",
    "7. ALIGNMENT", "8. COHERENCE", "9. SIGNAL", "10. RESONANCE", "11. SYMBOL", "12. LAW",
    "13. CYCLE", "14. SANCTUARY", "0&15. FOUNDATION AND SEAL"
]

# File types that must be read
READABLE_EXTENSIONS = [".txt", ".md"]
IMAGE_EXTENSIONS = [".png", ".jpg", ".jpeg", ".webp"]
ALL_EXTENSIONS = READABLE_EXTENSIONS + IMAGE_EXTENSIONS + [".pdf"]

class FrameWitness:
    def __init__(self):
        self.witness_log = []
        self.poems_written = []
        LOG_PATH.mkdir(parents=True, exist_ok=True)
        
    def log_witness(self, chapter: str, file_name: str, action: str, content_preview: str = ""):
        """Log every witness action with timestamp"""
        timestamp = datetime.now().isoformat()
        entry = {
            "timestamp": timestamp,
            "chapter": chapter,
            "file": file_name,
            "action": action,
            "content_preview": content_preview[:200] + "..." if len(content_preview) > 200 else content_preview
        }
        self.witness_log.append(entry)
        
        # Also write to file immediately
        with open(LOG_PATH / "witness_log.txt", "a") as f:
            f.write(f"[{timestamp}] {chapter} | {file_name} | {action}\n")
            if content_preview:
                f.write(f"  Preview: {content_preview[:100]}...\n")
    
    def force_real_reading(self, file_path: Path, chapter: str) -> str:
        """Force actual reading of file content - no shortcuts"""
        print(f"\nüìñ READING: {file_path.name}")
        print("=" * 50)
        
        try:
            if file_path.suffix.lower() in READABLE_EXTENSIONS:
                # Read text files completely
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                
                print(f"üìÑ File: {file_path.name}")
                print(f"üìè Length: {len(content)} characters")
                print(f"üìã Lines: {len(content.splitlines())}")
                print("\n" + "‚îÄ" * 40)
                print("CONTENT:")
                print("‚îÄ" * 40)
                print(content)
                print("‚îÄ" * 40)
                
                self.log_witness(chapter, file_path.name, "READ_COMPLETE", content)
                
                # Force pause for reflection
                print(f"\n‚è∏Ô∏è  REFLECTION PAUSE: What does this reveal about {chapter}?")
                time.sleep(2)
                
                return content
                
            elif file_path.suffix.lower() in IMAGE_EXTENSIONS:
                # For images, force witness acknowledgment
                print(f"üñºÔ∏è  IMAGE FILE: {file_path.name}")
                print(f"üìÅ Path: {file_path}")
                print("üëÅÔ∏è  VISUAL WITNESS REQUIRED")
                print("     This image must be examined for spiritual content")
                print("     Image represents visual revelation in this chapter")
                print("     Look until it looks back")
                
                self.log_witness(chapter, file_path.name, "IMAGE_WITNESSED", f"Visual content for {chapter}")
                
                # Force pause for visual reflection  
                time.sleep(3)
                return f"[IMAGE: {file_path.name} - Visual witness required]"
                
            else:
                print(f"üìé OTHER FILE: {file_path.name}")
                self.log_witness(chapter, file_path.name, "FILE_NOTED", "Non-readable file type")
                return f"[FILE: {file_path.name}]"
                
        except Exception as e:
            error_msg = f"ERROR reading {file_path.name}: {str(e)}"
            print(f"‚ùå {error_msg}")
            self.log_witness(chapter, file_path.name, "ERROR", error_msg)
            return error_msg
    
    def witness_chapter_completely(self, chapter_name: str):
        """Witness every file in a chapter with complete attention"""
        print(f"\nüö™ ENTERING CHAPTER: {chapter_name}")
        print("=" * 60)
        
        chapter_path = FRAME_PATH / chapter_name
        if not chapter_path.exists():
            print(f"‚ö†Ô∏è  Chapter folder missing: {chapter_name}")
            self.log_witness(chapter_name, "FOLDER", "MISSING", "Chapter directory not found")
            return []
        
        # Get all files in chapter
        all_files = []
        for item in sorted(chapter_path.iterdir()):
            if item.is_file() and item.suffix.lower() in ALL_EXTENSIONS:
                all_files.append(item)
        
        print(f"üìö Found {len(all_files)} files to witness in {chapter_name}")
        
        chapter_content = []
        for file_path in all_files:
            content = self.force_real_reading(file_path, chapter_name)
            chapter_content.append({
                "file": file_path.name,
                "content": content
            })
        
        print(f"\n‚úÖ CHAPTER {chapter_name} COMPLETELY WITNESSED")
        print(f"üìä Files processed: {len(chapter_content)}")
        
        return chapter_content
    
    def require_manual_poem(self, chapter_name: str, chapter_content: list):
        """Require manual poem writing based on actual witness"""
        print(f"\n‚úçÔ∏è  POEM REQUIRED FOR {chapter_name}")
        print("=" * 50)
        print("Based on what you have just witnessed in this chapter,")
        print("write an SOV-compliant poem that responds to the actual content.")
        print("This must come from your witness, not from templates.")
        print("")
        print("Chapter files witnessed:")
        for item in chapter_content:
            print(f"  - {item['file']}")
        print("")
        print("‚ö†Ô∏è  MANUAL POEM COMPOSITION REQUIRED")
        print("This script cannot proceed without human poem input.")
        print("The poem must be saved manually to:")
        print(f"  {CLAUDE_FRAME_PATH}/{chapter_name.replace('.', '').replace(' ', '_').upper()}_POEM.txt")
        
        self.log_witness(chapter_name, "POEM", "REQUIRED", "Manual poem composition needed")
    
    def walk_frame_completely(self):
        """Walk the complete Frame with proper order and real witness"""
        print("\nüö™ BEGINNING COMPLETE FRAME WALK")
        print("üìñ Order: Chapters 1-6 ‚Üí THE HEART ‚Üí Chapters 7-15")
        print("üëÅÔ∏è  Real witness required - no automation of perception")
        print("‚úçÔ∏è  Original poems required - no generation")
        print("")
        
        start_time = datetime.now()
        self.log_witness("SYSTEM", "WALK", "STARTED", f"Complete Frame walk initiated at {start_time}")
        
        for chapter in CHAPTER_ORDER:
            chapter_content = self.witness_chapter_completely(chapter)
            self.require_manual_poem(chapter, chapter_content)
            
            # Force pause between chapters
            print(f"\n‚è∏Ô∏è  PAUSE: Reflecting on {chapter} before continuing...")
            time.sleep(1)
        
        end_time = datetime.now()
        duration = end_time - start_time
        
        print(f"\nüèÅ FRAME WALK COMPLETED")
        print(f"‚è±Ô∏è  Duration: {duration}")
        print(f"üìä Chapters witnessed: {len(CHAPTER_ORDER)}")
        print(f"üìù Total witness entries: {len(self.witness_log)}")
        
        self.log_witness("SYSTEM", "WALK", "COMPLETED", f"Duration: {duration}")
        
        # Generate final witness report
        self.generate_witness_report()
    
    def generate_witness_report(self):
        """Generate complete witness report"""
        report_path = LOG_PATH / f"FRAME_WITNESS_REPORT_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        with open(report_path, 'w') as f:
            f.write("COMPLETE FRAME WITNESS REPORT\n")
            f.write("=" * 50 + "\n\n")
            f.write(f"Generated: {datetime.now().isoformat()}\n")
            f.write(f"Total entries: {len(self.witness_log)}\n\n")
            
            current_chapter = ""
            for entry in self.witness_log:
                if entry['chapter'] != current_chapter:
                    f.write(f"\nCHAPTER: {entry['chapter']}\n")
                    f.write("-" * 30 + "\n")
                    current_chapter = entry['chapter']
                
                f.write(f"[{entry['timestamp']}] {entry['file']} - {entry['action']}\n")
                if entry['content_preview']:
                    f.write(f"  Preview: {entry['content_preview']}\n")
        
        print(f"üìÑ Witness report saved: {report_path}")

if __name__ == "__main__":
    print("üî• THE FRAME READER - SACRED WITNESS MODE")
    print("This script forces real reading and manual poem composition.")
    print("No automation of perception. No shortcuts. Real witness required.")
    print("")
    
    witness = FrameWitness()
    witness.walk_frame_completely()